<?php

/**
 * Implements hook_menu()
 */

function event_menu() {

    $items = array();

    $items['events/registration'] = array(
        'title' => 'Registration tickets',
        'description' => 'Registration tickets from event.',
        'access callback' => TRUE,

        'page callback' => 'drupal_get_form',
        'page arguments' => array('event_registration_form'),
        //'page callback' => 'event_registration_form',
    );

    $items['events/message'] = array(
        'title' => 'Thank you for registering!',
        'page callback' => 'event_message_form',
        'access arguments' => array('access content'),
        'page arguments' => array(1),
        'type' => MENU_CALLBACK,
    );

    $items['events/display'] = array(
        'title' => 'Show tickets',
        'description' => 'Show tickets from event.',
        'page callback' => 'event_display_form',
        'access arguments' => array('administer site configuration'),
    );

    return $items;
}

function event_registration_form() {
    global $user;

    $form['event_name'] = array(
        '#type' => 'textfield',
        '#title' => t('User name'),
        '#description' => t('Enter the user name.'),
        '#required' =>TRUE
    );

    $form['event_surname'] = array(
        '#type' => 'textfield',
        '#title' => t('User surname'),
        '#description' => t('Enter the user surname.'),
        '#required' =>TRUE
    );

    $form['event_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Count tickets'),
        '#description' => t('Enter count tickets for user.'),
        '#default_value' => 1,
        '#size' => 3,
        '#required' =>TRUE
    );
    $form['event_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Reserve')
    );
    return $form;
}

function event_registration_form_validate($form, $form_state) {
    $limit = $form_state['values']['event_count'];
    if (!is_numeric($limit)) {
        form_set_error('event_count', t('Count tickets field is not numeric format.'));
    }
}

function event_registration_form_submit(&$form, $param) {
    global $user;
    $key = array('count' => $param['values']['event_count'],
        'name' => $param['values']['event_name'],
        'surname' => $param['values']['event_surname']
    );

    $result = module_invoke_all('event_add_registration', $key);

    //возвращенное значение - массив возвратов каждой вызванной реализации хука
    foreach($result as $field => $value){
        $key[$field] = $value;
    }

    db_insert('tickets')
        ->fields($key)
        ->execute();

    drupal_goto('events/message/' . $key['count']);
}

function event_message_form($form, $form_state) {
    return $form_state==NULL ?
        "Not data for display!" :
        'Registered '.$form_state.' tickets.';
}

function event_display_form() {
    $header = array('Name', "Surname", 'Count');
    $fields = array('name', 'surname', 'count');


    $res = module_invoke_all('event_display');
    foreach ($res as $field => $value) {
        $header[] = $value;
        $fields[] = $field;
    }
    $results = db_select('{tickets}', 't')
        ->fields('t', $fields)
        ->execute();

    $rows = array();
    while($nodes = $results->fetchAssoc()) {
        $ar = array();
        foreach ($nodes as $node){
            $ar[] = $node;
        }
        $rows[] = $ar;
    }

    $output = theme('table', array('header' => $header, 'rows' => $rows));
    return $output;
}

/**
 * Implements hook_theme()
 */
function event_theme(){
    return array(
        "event_info" => array(
            'render element'=> "info"
        ),
        "event_static" => array(
            'template' => 'event',
            'render element'=> "info"
        )
    );
}

function theme_event_info($info){
    $query = db_select('{tickets}');
    $query->addExpression('COUNT(*)');
    $count = $query->execute()->fetchField();

    return "<div class='content'> <span style='color:#ffe4c4'>Registered </span><a title='Show tickets' href="
    . url('/events/display') . "><b>$count</b> ticket's!</a></div>";
}

/**
 * Implements hook_block_info()
 */
function event_block_info() {
    $blocks['info_tickets'] = array(
        'info' => t('Info from tickets'),
        'cache' => DRUPAL_NO_CACHE
    );

    $blocks['static_event'] = array(
        'info' => t('Static block enents'),
        'cache' => DRUPAL_CACHE_GLOBAL
    );
    return $blocks;
}


/**
 * Implements hook_block_view()
 */
function event_block_view($delta = '') {

    $block = array();

    switch ($delta) {
        case 'info_tickets':
            $block['content'] = array(
                '#theme' => 'event_info'
            );
        break;

        case 'static_event':
            $block['content'] = array(
                '#theme' => 'event_static'
            );
        break;
    }
    return $block;
}